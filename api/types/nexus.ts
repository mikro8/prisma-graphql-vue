/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context } from "./interface"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AuthType: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  DecodedToken: { // root type
    iat?: number | null; // Int
    id?: number | null; // Int
    isAdmin?: boolean | null; // Boolean
    passwordHash?: string | null; // String
    personId?: number | null; // Int
    username?: string | null; // String
  }
  Mutation: {};
  Person: { // root type
    email?: string | null; // String
    employmentDate: NexusGenScalars['DateTime']; // DateTime!
    employmentStatus: boolean; // Boolean!
    firstname: string; // String!
    id: number; // Int!
    lastname: string; // String!
    salary: number; // Float!
    unEmploymentDate?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: {};
  User: { // root type
    id: number; // Int!
    isAdmin: boolean; // Boolean!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthType: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  DecodedToken: { // field return type
    iat: number | null; // Int
    id: number | null; // Int
    isAdmin: boolean | null; // Boolean
    passwordHash: string | null; // String
    personId: number | null; // Int
    username: string | null; // String
  }
  Mutation: { // field return type
    signin: NexusGenRootTypes['AuthType'] | null; // AuthType
    signup: NexusGenRootTypes['AuthType'] | null; // AuthType
  }
  Person: { // field return type
    email: string | null; // String
    employmentDate: NexusGenScalars['DateTime']; // DateTime!
    employmentStatus: boolean; // Boolean!
    firstname: string; // String!
    fullname: string | null; // String
    id: number; // Int!
    lastname: string; // String!
    salary: number; // Float!
    unEmploymentDate: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: { // field return type
    decodeMyToken: NexusGenRootTypes['DecodedToken'] | null; // DecodedToken
    getMyUser: NexusGenRootTypes['User'] | null; // User
    listPersons: NexusGenRootTypes['Person'][]; // [Person!]!
  }
  User: { // field return type
    id: number; // Int!
    isAdmin: boolean; // Boolean!
    person: NexusGenRootTypes['Person'] | null; // Person
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthType: { // field return type name
    token: 'String'
    user: 'User'
  }
  DecodedToken: { // field return type name
    iat: 'Int'
    id: 'Int'
    isAdmin: 'Boolean'
    passwordHash: 'String'
    personId: 'Int'
    username: 'String'
  }
  Mutation: { // field return type name
    signin: 'AuthType'
    signup: 'AuthType'
  }
  Person: { // field return type name
    email: 'String'
    employmentDate: 'DateTime'
    employmentStatus: 'Boolean'
    firstname: 'String'
    fullname: 'String'
    id: 'Int'
    lastname: 'String'
    salary: 'Float'
    unEmploymentDate: 'DateTime'
  }
  Query: { // field return type name
    decodeMyToken: 'DecodedToken'
    getMyUser: 'User'
    listPersons: 'Person'
  }
  User: { // field return type name
    id: 'Int'
    isAdmin: 'Boolean'
    person: 'Person'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    signin: { // args
      password: string; // String!
      username: string; // String!
    }
    signup: { // args
      password_1: string; // String!
      password_2: string; // String!
      personId: number; // Int!
      username: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}